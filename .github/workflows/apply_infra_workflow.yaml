name: "apply_infra_workflow"

on:
  workflow_call:
    inputs:
      terraform_version:
        type: string
        required: true
      environment:
        type: string
        required: true
      branch:
        type: string
        required: true
      aws_region:
        type: string
        required: true
      aws_assume_role_arn:
        type: string
        required: true
      aws_state_file_s3_bucket:
        type: string
        required: true
      aws_state_lock_dynamodb_table:
        type: string
        required: true

jobs:
  apply_infra_workflow:
    name: "Apply Infra workflow"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./lambdas/artifacts
          pattern: "lambda_*_artifact"

      - name: Display downloaded artifact structure
        run: ls -R ./../lambdas/artifacts

      # - name: Display variables
      #   run: |
      #     echo "terraform_version: ${{ inputs.terraform_version }}"
      #     echo "environment: ${{ inputs.environment }}"
      #     echo "branch: ${{ inputs.branch }}"
      #     echo "aws_region: ${{ inputs.aws_region }}"
      #     echo "aws_assume_role_arn: ${{ inputs.aws_assume_role_arn }}"
      #     echo "aws_state_file_s3_bucket: ${{ inputs.aws_state_file_s3_bucket }}"
      #     echo "aws_state_lock_dynamodb_table: ${{ inputs.aws_state_lock_dynamodb_table }}"

      - name: Deploy resources
        run: |
          echo "Deploy resources for branch ${{ inputs.branch }}"

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ inputs.aws_assume_role_arn }}
      #     role-session-name: GitHub_to_AWS_via_FederatedIODC
      #     aws_region: ${{ inputs.aws_region }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform_version }}

      - name: Terraform fmt
        id: terraform-fmt
        run: terraform fmt -check

    # - name: Terraform init
    #   id: terraform-init
    #   run: |
    #     terraform init \
    #       -backend-config="bucket=${{ inputs.aws_state_file_s3_bucket }}" \
    #       -backend-config="key=${{ github.event.repository.name }}" \
    #       -backend-config="region=${{ inputs.aws_region }}" \
    #       -backend-config="dynamodb_table=${{ inputs.aws_state_lock_dynamodb_table }}"

    # - name: Terraform validate
    #   id: terraform-validate
    #   run: terraform validate

    # - name: Terraform plan
    #   id: terraform-plan
    #   run: |
    #     terraform workspace select ${{ inputs.environment }} -or-create &&
    #     terraform plan \
    #       -var="branch=${{ inputs.branch }}" \
    #       -var-file="./envs/${{ inputs.environment }}.tfvars" \
    #       -out="${{ inputs.environment }}.plan"

    # - name: Wait for deployment approval
    #   uses: trstringer/manual-approval@v1
    #   with:
    #     secret: ${{ github.TOKEN }}
    #     approvers: icaroribeiro
    #     minimum-approvals: 1
    #     issue-title: "Deploying to ${{ inputs.environment }} environment"
    #     issue-body: "Please approve or deny the deployment!"
    #     exclude-workflow-initiator-as-approver: false
    #     additional-approved-words: ""
    #     additional-denied-words: ""
    #   timeout-minutes: 60

    # - name: Terraform apply
    #   id: terraform-apply
    #   run: |
    #     terraform workspace select ${{ inputs.environment }} -or-create &&
    #     terraform apply "${{ inputs.environment }}.plan -auto-approve"
